# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from HMCL_V2X/HMCL_SPATdata.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HMCL_SPATdata(genpy.Message):
  _md5sum = "3135b1ac657326c96fd84764b8da054d"
  _type = "HMCL_V2X/HMCL_SPATdata"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 states
string movementName
int32 signalGroup
int32 eventState
int32 timing_min_End_Time
int32 connectionID
bool pedBicycleDetect

"""
  __slots__ = ['states','movementName','signalGroup','eventState','timing_min_End_Time','connectionID','pedBicycleDetect']
  _slot_types = ['int32','string','int32','int32','int32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       states,movementName,signalGroup,eventState,timing_min_End_Time,connectionID,pedBicycleDetect

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HMCL_SPATdata, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.states is None:
        self.states = 0
      if self.movementName is None:
        self.movementName = ''
      if self.signalGroup is None:
        self.signalGroup = 0
      if self.eventState is None:
        self.eventState = 0
      if self.timing_min_End_Time is None:
        self.timing_min_End_Time = 0
      if self.connectionID is None:
        self.connectionID = 0
      if self.pedBicycleDetect is None:
        self.pedBicycleDetect = False
    else:
      self.states = 0
      self.movementName = ''
      self.signalGroup = 0
      self.eventState = 0
      self.timing_min_End_Time = 0
      self.connectionID = 0
      self.pedBicycleDetect = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.states
      buff.write(_get_struct_i().pack(_x))
      _x = self.movementName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4iB().pack(_x.signalGroup, _x.eventState, _x.timing_min_End_Time, _x.connectionID, _x.pedBicycleDetect))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.states,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.movementName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.movementName = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.signalGroup, _x.eventState, _x.timing_min_End_Time, _x.connectionID, _x.pedBicycleDetect,) = _get_struct_4iB().unpack(str[start:end])
      self.pedBicycleDetect = bool(self.pedBicycleDetect)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.states
      buff.write(_get_struct_i().pack(_x))
      _x = self.movementName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4iB().pack(_x.signalGroup, _x.eventState, _x.timing_min_End_Time, _x.connectionID, _x.pedBicycleDetect))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.states,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.movementName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.movementName = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.signalGroup, _x.eventState, _x.timing_min_End_Time, _x.connectionID, _x.pedBicycleDetect,) = _get_struct_4iB().unpack(str[start:end])
      self.pedBicycleDetect = bool(self.pedBicycleDetect)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4iB = None
def _get_struct_4iB():
    global _struct_4iB
    if _struct_4iB is None:
        _struct_4iB = struct.Struct("<4iB")
    return _struct_4iB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
