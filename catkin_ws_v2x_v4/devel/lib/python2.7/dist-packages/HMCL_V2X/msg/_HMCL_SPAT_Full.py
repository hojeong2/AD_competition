# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from HMCL_V2X/HMCL_SPAT_Full.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import HMCL_V2X.msg
import std_msgs.msg

class HMCL_SPAT_Full(genpy.Message):
  _md5sum = "9bc9fa0786734e9a72010ec00f2777c7"
  _type = "HMCL_V2X/HMCL_SPAT_Full"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

HMCL_SPAT data 

HMCL_SPATdata state0

HMCL_SPATdata state1

# HMCL_SPATdata data
# int32 states
# string movementName
# int32 signalGroup
# int32 eventState
# int32 timing_min_End_Time
# int32 connectionID
# bool pedBicycleDetect


# HMCL_SPATdata/state0 state0


# home/hmcl/catkin_ws_v2x/src/HMCL_V2X/msgHMCL_V2X/HMCL_SPATdata state0
# HMCL_V2X/HMCL_SPATdata state1
# HMCL_V2X/HMCL_SPATdata state2
# HMCL_V2X/HMCL_SPATdata state3
# HMCL_V2X/HMCL_SPATdata state4
# HMCL_V2X/HMCL_SPATdata state5
# HMCL_V2X/HMCL_SPATdata state6
# HMCL_V2X/HMCL_SPATdata state7
# HMCL_V2X/HMCL_SPATdata state8
# HMCL_V2X/HMCL_SPATdata state9
# HMCL_V2X/HMCL_SPATdata state10
# HMCL_V2X/HMCL_SPATdata state11

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: HMCL_V2X/HMCL_SPAT

string name
int32 region
int32 id
int32 revision
int64 status
int32 moy
int32 timeStamp


# int32 states
# string movementName
# int32 signalGroup
# int32 eventState
# int32 timing_min_End_Time
# int32 connectionID
# bool pedBicycleDetect


# HMCL_SPATdata/state0 state0


# home/hmcl/catkin_ws_v2x/src/HMCL_V2X/msgHMCL_V2X/HMCL_SPATdata state0
# HMCL_V2X/HMCL_SPATdata state1
# HMCL_V2X/HMCL_SPATdata state2
# HMCL_V2X/HMCL_SPATdata state3
# HMCL_V2X/HMCL_SPATdata state4
# HMCL_V2X/HMCL_SPATdata state5
# HMCL_V2X/HMCL_SPATdata state6
# HMCL_V2X/HMCL_SPATdata state7
# HMCL_V2X/HMCL_SPATdata state8
# HMCL_V2X/HMCL_SPATdata state9
# HMCL_V2X/HMCL_SPATdata state10
# HMCL_V2X/HMCL_SPATdata state11

================================================================================
MSG: HMCL_V2X/HMCL_SPATdata
int32 states
string movementName
int32 signalGroup
int32 eventState
int32 timing_min_End_Time
int32 connectionID
bool pedBicycleDetect

"""
  __slots__ = ['header','data','state0','state1']
  _slot_types = ['std_msgs/Header','HMCL_V2X/HMCL_SPAT','HMCL_V2X/HMCL_SPATdata','HMCL_V2X/HMCL_SPATdata']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,data,state0,state1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HMCL_SPAT_Full, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.data is None:
        self.data = HMCL_V2X.msg.HMCL_SPAT()
      if self.state0 is None:
        self.state0 = HMCL_V2X.msg.HMCL_SPATdata()
      if self.state1 is None:
        self.state1 = HMCL_V2X.msg.HMCL_SPATdata()
    else:
      self.header = std_msgs.msg.Header()
      self.data = HMCL_V2X.msg.HMCL_SPAT()
      self.state0 = HMCL_V2X.msg.HMCL_SPATdata()
      self.state1 = HMCL_V2X.msg.HMCL_SPATdata()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.data.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3iq3i().pack(_x.data.region, _x.data.id, _x.data.revision, _x.data.status, _x.data.moy, _x.data.timeStamp, _x.state0.states))
      _x = self.state0.movementName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4iBi().pack(_x.state0.signalGroup, _x.state0.eventState, _x.state0.timing_min_End_Time, _x.state0.connectionID, _x.state0.pedBicycleDetect, _x.state1.states))
      _x = self.state1.movementName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4iB().pack(_x.state1.signalGroup, _x.state1.eventState, _x.state1.timing_min_End_Time, _x.state1.connectionID, _x.state1.pedBicycleDetect))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.data is None:
        self.data = HMCL_V2X.msg.HMCL_SPAT()
      if self.state0 is None:
        self.state0 = HMCL_V2X.msg.HMCL_SPATdata()
      if self.state1 is None:
        self.state1 = HMCL_V2X.msg.HMCL_SPATdata()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.data.name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.data.region, _x.data.id, _x.data.revision, _x.data.status, _x.data.moy, _x.data.timeStamp, _x.state0.states,) = _get_struct_3iq3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state0.movementName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state0.movementName = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.state0.signalGroup, _x.state0.eventState, _x.state0.timing_min_End_Time, _x.state0.connectionID, _x.state0.pedBicycleDetect, _x.state1.states,) = _get_struct_4iBi().unpack(str[start:end])
      self.state0.pedBicycleDetect = bool(self.state0.pedBicycleDetect)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state1.movementName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state1.movementName = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.state1.signalGroup, _x.state1.eventState, _x.state1.timing_min_End_Time, _x.state1.connectionID, _x.state1.pedBicycleDetect,) = _get_struct_4iB().unpack(str[start:end])
      self.state1.pedBicycleDetect = bool(self.state1.pedBicycleDetect)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.data.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3iq3i().pack(_x.data.region, _x.data.id, _x.data.revision, _x.data.status, _x.data.moy, _x.data.timeStamp, _x.state0.states))
      _x = self.state0.movementName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4iBi().pack(_x.state0.signalGroup, _x.state0.eventState, _x.state0.timing_min_End_Time, _x.state0.connectionID, _x.state0.pedBicycleDetect, _x.state1.states))
      _x = self.state1.movementName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4iB().pack(_x.state1.signalGroup, _x.state1.eventState, _x.state1.timing_min_End_Time, _x.state1.connectionID, _x.state1.pedBicycleDetect))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.data is None:
        self.data = HMCL_V2X.msg.HMCL_SPAT()
      if self.state0 is None:
        self.state0 = HMCL_V2X.msg.HMCL_SPATdata()
      if self.state1 is None:
        self.state1 = HMCL_V2X.msg.HMCL_SPATdata()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.data.name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.data.region, _x.data.id, _x.data.revision, _x.data.status, _x.data.moy, _x.data.timeStamp, _x.state0.states,) = _get_struct_3iq3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state0.movementName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state0.movementName = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.state0.signalGroup, _x.state0.eventState, _x.state0.timing_min_End_Time, _x.state0.connectionID, _x.state0.pedBicycleDetect, _x.state1.states,) = _get_struct_4iBi().unpack(str[start:end])
      self.state0.pedBicycleDetect = bool(self.state0.pedBicycleDetect)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state1.movementName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state1.movementName = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.state1.signalGroup, _x.state1.eventState, _x.state1.timing_min_End_Time, _x.state1.connectionID, _x.state1.pedBicycleDetect,) = _get_struct_4iB().unpack(str[start:end])
      self.state1.pedBicycleDetect = bool(self.state1.pedBicycleDetect)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3iq3i = None
def _get_struct_3iq3i():
    global _struct_3iq3i
    if _struct_3iq3i is None:
        _struct_3iq3i = struct.Struct("<3iq3i")
    return _struct_3iq3i
_struct_4iB = None
def _get_struct_4iB():
    global _struct_4iB
    if _struct_4iB is None:
        _struct_4iB = struct.Struct("<4iB")
    return _struct_4iB
_struct_4iBi = None
def _get_struct_4iBi():
    global _struct_4iBi
    if _struct_4iBi is None:
        _struct_4iBi = struct.Struct("<4iBi")
    return _struct_4iBi
